// Example Configuration for CatFlap v2.36

// The CatFlap executable will look for its .INI file using the executable's
// filename as a base, therefore if you change the actual .EXE name for some
// reason, remember to change the name of the .INI file too.

// CatFlap's configuration interpreter is pretty resilient, so don't worry too
// much about text formatting or whitespace, it should cope with anything.
// Which means the script engine has an easier job to do...

// Just bear in mind that one line should contain one command, and everything
// is treated as case-insensitive.

// Within the DOS Console mode of CatFlap, the script engine is hooked and so
// adds an extra level of functionality.

// The primary function of this file, and the script engine, is to bind
// functionality to certain keys.

// * For now, only keys F1-F12 are accessible *

// Certain internal procedures are exposed for use, these are referred to as
// 'Method's. You can write your own procedures, and these are referred to as
// 'Function's. Whilst realistically only of limited use to certain situations,
// writing Functions enables you to perform multiple Methods in a single step,
// and also provides the path to any future expansion of the scripting engine.

// Essentially, a command will either be calling a Method or a Function.

// Functions may call other Functions as you wish.

// Any items contained with '<' & '>' are user-definable parameters, & these
// symbols do not form part of the parameter.


//////////////////////////////////////////////////////////////////////////////
// METHODS
//////////////////////////////////////////////////////////////////////////////

// Currently, the following Methods are exposed to the script engine:
//
// down <filename> <address> <length>
// up <filename> <address>
// vdown <filename> <x> <y> <w> <h> <depth>
// reset
// Write8 <address> <8-bit byte>
// Write16 <address> <16-bit halfword>
// Write32 <address> <32-bit word>
// Fill8 <address> <address> <8-bit byte>
// print <string>
// SysCall <command line>

// The 'vdown' Method demonstrates a feature which could and may be applied
// in other ways in the future. You can give a filename which includes a '%d'
// descriptor (as in 'C'), for which an incremental counter is substituted.
// This permits each subsequent call to the 'vdown' Method to output a unique
// file, within the same CatFlap session. For example, 'grab%d.bmp' will
// output these files: 'grab0.bmp','grab1.bmp','grab2.bmp' ... etc.
// And 'grab%04d.bmp' will output: 'grab0000.bmp','grab0001.bmp' ... etc.


//////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
//////////////////////////////////////////////////////////////////////////////

// Functions are simple collections of commands to other Functions and Methods
// and are defined thus:
//
// StartFunc FunctionName
//  .
//  . any command lines you want
//  .
// EndFunc


//////////////////////////////////////////////////////////////////////////////
// KEY BINDINGS
//////////////////////////////////////////////////////////////////////////////

// Here are some actual key-bindings:

//   Key(F1)  = Method (VDOWN) _vram_%02d.bmp 0 0 1024 512 24
//   Key(F2)  = Function (TestFunc)
//   Key(F3)  = Method (SysCall) cdplayer
//   Key(F4)  = Method (DOWN) data.dat 0x80010000 65536
//   Key(F5)  = Method (UP) data.dat 0x80010000
//   Key(F6)  = Method (Write8) 0x80010000 0


// General Syntax for key-bindings are:
//
//      Key(<key>)=Method(<name>) <parameters>
// or   Key(<key>)=Function(<name>) <parameters>
//
// Remember, don't worry about upper/lower case, spacing or indenting.


//////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
//////////////////////////////////////////////////////////////////////////////

// Examples

//StartFunc TestFunc
//   Method (vdown) grab%02d.bmp 0 0 1024 512 24
//   Function (Message)
//EndFunc

//StartFunc Message
//   Method (print) I just grabbed all of VRAM :)
//EndFunc


